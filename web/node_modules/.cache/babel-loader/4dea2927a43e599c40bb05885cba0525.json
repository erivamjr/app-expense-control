{"ast":null,"code":"var _jsxFileName = \"/home/erivam/Documentos/Rocketseat/dtmoney/src/TransactionsContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport { api } from './services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TransactionsContext = /*#__PURE__*/createContext({});\nexport function TransactionsProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [transactions, setTransactions] = useState([]);\n  useEffect(() => {\n    api.get('transactions').then(response => setTransactions(response.data.transactions));\n  }, []);\n\n  async function createTransaction(transaction) {\n    await api.post('/transactions', transaction);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TransactionsContext.Provider, {\n    value: {\n      transactions,\n      createTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TransactionsProvider, \"tSC852gg/pAfbHr6jYEePbawnUU=\");\n\n_c = TransactionsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransactionsProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","api","TransactionsContext","TransactionsProvider","children","transactions","setTransactions","get","then","response","data","createTransaction","transaction","post"],"sources":["/home/erivam/Documentos/Rocketseat/dtmoney/src/TransactionsContext.tsx"],"sourcesContent":["import { createContext, useEffect, useState } from 'react'\nimport { api } from './services/api';\n\n\ninterface Transaction {\n  id: number;\n  title: string;\n  amount: number;\n  type: string;\n  category: string;\n  createdAt: string;\n}\n\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>\n\ninterface TransactionsProviderProps {\n  children: React.ReactNode;\n}\n\ninterface TransactionsContextData {\n  transactions: Transaction[];\n  createTransaction: (transaction: TransactionInput) => void;\n}\n\nexport const TransactionsContext = createContext<TransactionsContextData>(\n  {} as TransactionsContextData\n);\n\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n\n  useEffect(() => {\n    api.get('transactions')\n      .then(response => setTransactions(response.data.transactions));\n  }, [])\n\n  async function createTransaction(transaction: TransactionInput) {\n    await api.post('/transactions', transaction);\n  }\n\n  return (\n    <TransactionsContext.Provider value={{ transactions, createTransaction }}>\n      {children}\n    </TransactionsContext.Provider>\n  )\n}\n"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,GAAT,QAAoB,gBAApB;;AAuBA,OAAO,MAAMC,mBAAmB,gBAAGJ,aAAa,CAC9C,EAD8C,CAAzC;AAIP,OAAO,SAASK,oBAAT,OAAuE;EAAA;;EAAA,IAAzC;IAAEC;EAAF,CAAyC;EAC5E,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAgB,EAAhB,CAAhD;EAEAD,SAAS,CAAC,MAAM;IACdE,GAAG,CAACM,GAAJ,CAAQ,cAAR,EACGC,IADH,CACQC,QAAQ,IAAIH,eAAe,CAACG,QAAQ,CAACC,IAAT,CAAcL,YAAf,CADnC;EAED,CAHQ,EAGN,EAHM,CAAT;;EAKA,eAAeM,iBAAf,CAAiCC,WAAjC,EAAgE;IAC9D,MAAMX,GAAG,CAACY,IAAJ,CAAS,eAAT,EAA0BD,WAA1B,CAAN;EACD;;EAED,oBACE,QAAC,mBAAD,CAAqB,QAArB;IAA8B,KAAK,EAAE;MAAEP,YAAF;MAAgBM;IAAhB,CAArC;IAAA,UACGP;EADH;IAAA;IAAA;IAAA;EAAA,QADF;AAKD;;GAjBeD,oB;;KAAAA,oB"},"metadata":{},"sourceType":"module"}